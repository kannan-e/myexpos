alias syscallNo R1;
alias usersp R0;
usersp=SP;
syscallNo=[[PTBR+2*((usersp-5)/512)]*512+(SP-5)%512];

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=usersp;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;
alias physicalAddrRetVal R6;
physicalAddrRetVal=([PTBR+2*((usersp-1)/512)]*512)+((usersp-1)%512);

//Semlock system call
if(syscallNo==19) then
	breakpoint;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=19;
	alias semID R2;
	semID=[[PTBR+2*((usersp-4)/512)]*512+(usersp-4)%512];
	
	if((semID<0)||(semID>7)||([([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]+1)*512-16+2*semID]!=1)) then
		[physicalAddrRetVal]=-1;
		SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
		
		ireturn;
	endif;
	alias semEntry R3;
	semEntry=[([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]+1)*512-16+2*semID+1];
	while([SEMAPHORE_TABLE+4*semEntry]!=-1) do
		breakpoint;
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_SEMAPHORE;
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+5]=semEntry;
		multipush(R2,R3,R6);
		call SCHEDULER;
		multipop(R2,R3,R6);
	endwhile;
	[SEMAPHORE_TABLE+4*semEntry]=[SYSTEM_STATUS_TABLE+1];
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	[physicalAddrRetVal]=0;
	SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
	breakpoint;
	ireturn;	
	
endif;

//Semunlock system call
if(syscallNo==20) then
	breakpoint;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=20;
	alias semID R2;
	semID=[[PTBR+2*((usersp-4)/512)]*512+(usersp-4)%512];
	if((semID<0)||(semID>7)||([([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]+1)*512-16+2*semID]!=1)) then
		[physicalAddrRetVal]=-1;
		SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
		ireturn;
	endif;
	alias semEntry R3;
	semEntry=[([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]+1)*512-16+2*semID+1];
	if([SEMAPHORE_TABLE+4*semEntry]!=-1) then
		breakpoint;
		if([SEMAPHORE_TABLE+4*semEntry]!=[SYSTEM_STATUS_TABLE+1]) then
				[physicalAddrRetVal]=-2;
				SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
				[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
				ireturn;	
		endif;
		[SEMAPHORE_TABLE+4*semEntry]=-1;
		alias counter R4;
		counter=0;
		while(counter<16) do
			if(([PROCESS_TABLE+16*counter+4]==WAIT_SEMAPHORE)&&([PROCESS_TABLE+16*counter+5]==semEntry)) then
				
				[PROCESS_TABLE+16*counter+4]=READY;
			endif;
			counter=counter+1;
		endwhile;
		
	endif;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
	[physicalAddrRetVal]=0;
	breakpoint;
	ireturn;
endif;
