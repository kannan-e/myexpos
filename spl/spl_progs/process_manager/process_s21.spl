alias functionNum R1;
alias PID R2;

//Get PCB Entry
if(functionNum==1) then
	alias counter R0;
	counter=0;
	while(counter<16) do
		if([PROCESS_TABLE+16*counter+4]==TERMINATED) then
			[PROCESS_TABLE+16*counter+1]=counter;
			[PROCESS_TABLE+16*counter+4]=ALLOCATED;
			[PROCESS_TABLE+16*counter+14]=PAGE_TABLE_BASE+20*counter;
			[PROCESS_TABLE+16*counter+15]=10;
			return;
		endif;
		counter=counter+1;
	endwhile;
	
endif;

//Free User Area Page
if(functionNum==2) then
	alias userAreaPageNum R3;
	userAreaPageNum=[PROCESS_TABLE + PID*16 + 11];
	
	multipush(R3);
	R1=2;
	R2=userAreaPageNum;
	call MEMORY_MANAGER;
	multipop(R3);
	
	return;
endif;

//Exit Process
if(functionNum==3) then
	breakpoint;
	if([PROCESS_TABLE+16*PID+9]!=9) then
		alias counter R4;
		counter=0;
		breakpoint;
		while(counter < 16) do
			breakpoint;
			if(([PROCESS_TABLE + counter*16 + 4]==WAIT_PROCESS) && ([PROCESS_TABLE + counter*16 + 5]==PID)) then
				[PROCESS_TABLE + counter*16 + 4]=READY;
			endif;
			if([PROCESS_TABLE+counter*16+2]==PID) then
				[PROCESS_TABLE+counter*16+2]=-1;
			endif;
			counter=counter+1;
		endwhile;
	endif;

	multipush(R1,R2);
	R1=4;
	breakpoint;
	call PROCESS_MANAGER;
	breakpoint;
	multipop(R1,R2);
	
	multipush(R1,R2);
	R1=2;	
	breakpoint;
	call PROCESS_MANAGER;
	breakpoint;
	multipop(R1,R2);
	
	[PROCESS_TABLE + 16*PID + 4]=TERMINATED;
	breakpoint;
	return;
endif;

//Free Page Table
if(functionNum==4) then
	alias pageTable R3;
	pageTable=[PROCESS_TABLE+16*PID+14];
	[pageTable+0]=-1;
	[pageTable+1]="0000";
	[pageTable+2]=-1;
	[pageTable+3]="0000";
	alias counter R4;
	counter=2;
	while(counter<10) do
		if([pageTable+2*counter]!=-1) then
			multipush(R1,R2,R3,R4);
			R1=2;
			R2=[pageTable+2*counter];
			
			call MEMORY_MANAGER;
			multipop(R1,R2,R3,R4);
			[pageTable+2*counter]=-1;
			[pageTable+2*counter+1]="0000";
		endif;
		counter=counter+1;
	endwhile;
	
	alias diskMapentry R5;
	diskMapentry=DISK_MAP_TABLE+PID*10;
	counter=0;
	while(counter<10) do
		if([diskMapentry+counter]!=-1) then
			if((counter==2)||(counter==3)||(counter==8)||(counter==9)) then
				multipush(R1,R2,R3,R4,R5);
				R1=4;
				R2=[diskMapentry+counter];
				R3=R2;
				
				call MEMORY_MANAGER;
				multipop(R1,R2,R3,R4,R5);
			endif;
			[diskMapentry+counter]=-1;
			
		endif;
		counter=counter+1;
	endwhile;
	return;
endif;
